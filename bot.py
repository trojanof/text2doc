import logging
import tempfile
import os
import telebot
from docx import Document
import streamlit as st
# from docx.shared import Inches
# from docx.enum.text import WD_ALIGN_PARAGRAPH

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω)
BOT_TOKEN = st.secrets['TOKEN']

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)


@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º "
        "(–∂–∏—Ä–Ω—ã–π, –∫—É—Ä—Å–∏–≤, –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π, –∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π), "
        "–∏ —è —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ –≤ DOCX —Ñ–∞–π–ª!\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "‚Ä¢ **–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç**\n"
        "‚Ä¢ *–∫—É—Ä—Å–∏–≤*\n"
        "‚Ä¢ __–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π__\n"
        "‚Ä¢ ~~–∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π~~\n"
        "‚Ä¢ `–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π`\n"
        "‚Ä¢ ```–±–ª–æ–∫ –∫–æ–¥–∞```"
    )
    bot.reply_to(message, welcome_text)


def apply_formatting(run, entity_type):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ —Ç–µ–∫—Å—Ç—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞"""
    if entity_type == "bold":
        run.bold = True
    elif entity_type == "italic":
        run.italic = True
    elif entity_type == "underline":
        run.underline = True
    elif entity_type == "strikethrough":
        run.font.strike = True
    elif entity_type == "code":
        run.font.name = "Courier New"
    elif entity_type == "pre":
        run.font.name = "Courier New"


def create_docx_with_formatting(text, entities):
    """–°–æ–∑–¥–∞–µ—Ç DOCX –¥–æ–∫—É–º–µ–Ω—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    doc = Document()
    paragraph = doc.add_paragraph()

    # –ï—Å–ª–∏ –Ω–µ—Ç entities, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
    if not entities:
        paragraph.add_run(text)
        return doc
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º entities –ø–æ offset
    sorted_entities = sorted(entities, key=lambda x: x.offset)
    
    current_pos = 0
    
    for entity in sorted_entities:
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ
        if entity.offset > current_pos:
            paragraph.add_run(text[current_pos:entity.offset])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        formatted_text = text[entity.offset:entity.offset + entity.length]
        run = paragraph.add_run(formatted_text)
        apply_formatting(run, entity.type)
        
        current_pos = entity.offset + entity.length
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
    if current_pos < len(text):
        paragraph.add_run(text[current_pos:])
    
    return doc


@bot.message_handler(content_types=['text'])
def handle_text_message(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        text = message.text
        entities = message.entities or []
        
        if not text:
            bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = bot.reply_to(message, "–°–æ–∑–¥–∞—é DOCX —Ñ–∞–π–ª... ‚è≥")
        
        # –°–æ–∑–¥–∞–µ–º DOCX –¥–æ–∫—É–º–µ–Ω—Ç
        doc = create_docx_with_formatting(text, entities)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix='.docx',
                                         delete=False) as temp_file:
            doc.save(temp_file.name)
            temp_filename = temp_file.name
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            with open(temp_filename, 'rb') as doc_file:
                bot.send_document(
                    message.chat.id,
                    doc_file,
                    caption="–í–∞—à —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ DOCX! üìÑ",
                    reply_to_message_id=message.message_id
                )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            bot.delete_message(message.chat.id, processing_msg.message_id)
            
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(temp_filename)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.reply_to(
            message,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


@bot.message_handler(content_types=['document'])
def handle_document(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    bot.reply_to(
        message,
        "–Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏! "
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º."
    )


@bot.message_handler(content_types=['photo', 'video', 'audio', 'voice', 
                                    'sticker'])
def handle_media(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤"""
    bot.reply_to(
        message,
        "–Ø –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è! "
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º."
    )


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    st.write("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    st.write(f"–ë–æ—Ç: @{bot.get_me().username}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        bot.polling(none_stop=True, interval=0, timeout=20)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        print("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
        import time
        time.sleep(5)
        main()


if __name__ == '__main__':
    main()
    st.stop()
